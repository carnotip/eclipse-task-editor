/*
* generated by Xtext
*/
package de.sebastianbenz.task.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import de.sebastianbenz.task.services.TaskPaperGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class TaskPaperParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private TaskPaperGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Todo_Group(this, this, 0, inst);
			case 1: return new Content_Alternatives(this, this, 1, inst);
			case 2: return new Task_Alternatives(this, this, 2, inst);
			case 3: return new OpenTask_Group(this, this, 3, inst);
			case 4: return new ClosedTask_Group(this, this, 4, inst);
			case 5: return new Note_TextAssignment(this, this, 5, inst);
			case 6: return new Project_Group(this, this, 6, inst);
			case 7: return new Spaces_TextAssignment(this, this, 7, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Todo ****************
 *
 * Todo:
 * 	{Todo} contents+=Content+ WS*;
 *
 **/

// {Todo} contents+=Content+ WS*
protected class Todo_Group extends GroupToken {
	
	public Todo_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTodoAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Todo_ContentsAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTodoAccess().getTodoAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Todo}
protected class Todo_TodoAction_0 extends ActionToken  {

	public Todo_TodoAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getTodoAccess().getTodoAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// contents+=Content+
protected class Todo_ContentsAssignment_1 extends AssignmentToken  {
	
	public Todo_ContentsAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTodoAccess().getContentsAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Content_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("contents",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("contents");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getContentRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Todo_ContentsAssignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			case 1: return new Todo_TodoAction_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule Todo ****************/


/************ begin Rule Content ****************
 *
 * Content:
 * 	Project | => Task | Note | Spaces;
 *
 **/

// => Project | => Task | Note | Spaces
protected class Content_Alternatives extends AlternativesToken {

	public Content_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getContentAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Content_ProjectParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Content_TaskParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Content_NoteParserRuleCall_2(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Content_SpacesParserRuleCall_3(lastRuleCallOrigin, this, 3, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClosedTaskAccess().getClosedTaskAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getNoteRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpenTaskAccess().getOpenTaskAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getProjectAccess().getProjectAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSpacesRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// => Project
protected class Content_ProjectParserRuleCall_0 extends RuleCallToken {
	
	public Content_ProjectParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getProjectParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Project_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProjectAccess().getProjectAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Project_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// => Task
protected class Content_TaskParserRuleCall_1 extends RuleCallToken {
	
	public Content_TaskParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getTaskParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Task_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClosedTaskAccess().getClosedTaskAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpenTaskAccess().getOpenTaskAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(Task_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Note
protected class Content_NoteParserRuleCall_2 extends RuleCallToken {
	
	public Content_NoteParserRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getNoteParserRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Note_TextAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNoteRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Note_TextAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// Spaces
protected class Content_SpacesParserRuleCall_3 extends RuleCallToken {
	
	public Content_SpacesParserRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getContentAccess().getSpacesParserRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Spaces_TextAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpacesRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Spaces_TextAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Content ****************/


/************ begin Rule Task ****************
 *
 * Task:
 * 	ClosedTask | OpenTask;
 *
 **/

// => ClosedTask | OpenTask
protected class Task_Alternatives extends AlternativesToken {

	public Task_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTaskAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Task_ClosedTaskParserRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Task_OpenTaskParserRuleCall_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClosedTaskAccess().getClosedTaskAction_0().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getOpenTaskAccess().getOpenTaskAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// => ClosedTask
protected class Task_ClosedTaskParserRuleCall_0 extends RuleCallToken {
	
	public Task_ClosedTaskParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTaskAccess().getClosedTaskParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClosedTask_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClosedTaskAccess().getClosedTaskAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(ClosedTask_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// OpenTask
protected class Task_OpenTaskParserRuleCall_1 extends RuleCallToken {
	
	public Task_OpenTaskParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTaskAccess().getOpenTaskParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpenTask_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpenTaskAccess().getOpenTaskAction_0().getType().getClassifier())
			return null;
		if(checkForRecursion(OpenTask_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


/************ end Rule Task ****************/


/************ begin Rule OpenTask ****************
 *
 * OpenTask:
 * 	{OpenTask} text=TASK_OPEN;
 *
 **/

// {OpenTask} text=TASK_OPEN
protected class OpenTask_Group extends GroupToken {
	
	public OpenTask_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getOpenTaskAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpenTask_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getOpenTaskAccess().getOpenTaskAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {OpenTask}
protected class OpenTask_OpenTaskAction_0 extends ActionToken  {

	public OpenTask_OpenTaskAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getOpenTaskAccess().getOpenTaskAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// text=TASK_OPEN
protected class OpenTask_TextAssignment_1 extends AssignmentToken  {
	
	public OpenTask_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getOpenTaskAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new OpenTask_OpenTaskAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getOpenTaskAccess().getTextTASK_OPENTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getOpenTaskAccess().getTextTASK_OPENTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule OpenTask ****************/


/************ begin Rule ClosedTask ****************
 *
 * ClosedTask:
 * 	{ClosedTask} text=TASK_CLOSED;
 *
 **/

// {ClosedTask} text=TASK_CLOSED
protected class ClosedTask_Group extends GroupToken {
	
	public ClosedTask_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getClosedTaskAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClosedTask_TextAssignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getClosedTaskAccess().getClosedTaskAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {ClosedTask}
protected class ClosedTask_ClosedTaskAction_0 extends ActionToken  {

	public ClosedTask_ClosedTaskAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getClosedTaskAccess().getClosedTaskAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// text=TASK_CLOSED
protected class ClosedTask_TextAssignment_1 extends AssignmentToken  {
	
	public ClosedTask_TextAssignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getClosedTaskAccess().getTextAssignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new ClosedTask_ClosedTaskAction_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getClosedTaskAccess().getTextTASK_CLOSEDTerminalRuleCall_1_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getClosedTaskAccess().getTextTASK_CLOSEDTerminalRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule ClosedTask ****************/


/************ begin Rule Note ****************
 *
 * //DoneTask:
 * //	text=TASK_DONE;
 * //
 * Note:
 * 	text=NOTE_CONTENT;
 *
 **/

// text=NOTE_CONTENT
protected class Note_TextAssignment extends AssignmentToken  {
	
	public Note_TextAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getNoteAccess().getTextAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getNoteRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getNoteAccess().getTextNOTE_CONTENTTerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getNoteAccess().getTextNOTE_CONTENTTerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Note ****************/


/************ begin Rule Project ****************
 *
 * Project:
 * 	{Project} => (intend+=WS)* text=(PROJECT_1 | PROJECT_2 | PROJECT_3);
 *
 **/

// {Project} => (intend+=WS)* text=(PROJECT_1 | PROJECT_2 | PROJECT_3)
protected class Project_Group extends GroupToken {
	
	public Project_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProjectAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Project_TextAssignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getProjectAccess().getProjectAction_0().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// {Project}
protected class Project_ProjectAction_0 extends ActionToken  {

	public Project_ProjectAction_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Action getGrammarElement() {
		return grammarAccess.getProjectAccess().getProjectAction_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(!eObjectConsumer.isConsumed()) return null;
		return eObjectConsumer;
	}
}

// => (intend+=WS)*
protected class Project_Group_1 extends GroupToken {
	
	public Project_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getProjectAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Project_IntendAssignment_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// intend+=WS
protected class Project_IntendAssignment_1_0 extends AssignmentToken  {
	
	public Project_IntendAssignment_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProjectAccess().getIntendAssignment_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Project_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Project_ProjectAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("intend",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("intend");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_1_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_1_0_0();
			return obj;
		}
		return null;
	}

}


// text=(PROJECT_1 | PROJECT_2 | PROJECT_3)
protected class Project_TextAssignment_2 extends AssignmentToken  {
	
	public Project_TextAssignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getProjectAccess().getTextAssignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Project_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Project_ProjectAction_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProjectAccess().getTextPROJECT_1TerminalRuleCall_2_0_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProjectAccess().getTextPROJECT_1TerminalRuleCall_2_0_0();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProjectAccess().getTextPROJECT_2TerminalRuleCall_2_0_1(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProjectAccess().getTextPROJECT_2TerminalRuleCall_2_0_1();
			return obj;
		}
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getProjectAccess().getTextPROJECT_3TerminalRuleCall_2_0_2(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getProjectAccess().getTextPROJECT_3TerminalRuleCall_2_0_2();
			return obj;
		}
		return null;
	}

}


/************ end Rule Project ****************/


/************ begin Rule Spaces ****************
 *
 * Spaces:
 * 	text=SPACE;
 *
 **/

// text=SPACE
protected class Spaces_TextAssignment extends AssignmentToken  {
	
	public Spaces_TextAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSpacesAccess().getTextAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSpacesRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("text",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("text");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSpacesAccess().getTextSPACETerminalRuleCall_0(), value, null)) {
			type = AssignmentType.TERMINAL_RULE_CALL;
			element = grammarAccess.getSpacesAccess().getTextSPACETerminalRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule Spaces ****************/

}
