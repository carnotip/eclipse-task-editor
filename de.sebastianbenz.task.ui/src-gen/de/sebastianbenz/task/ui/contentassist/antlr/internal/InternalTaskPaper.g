/*
* generated by Xtext
*/
grammar InternalTaskPaper;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.sebastianbenz.task.services.TaskPaperGrammarAccess;

}

@parser::members {
 
 	private TaskPaperGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TaskPaperGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTodo
entryRuleTodo 
:
{ before(grammarAccess.getTodoRule()); }
	 ruleTodo
{ after(grammarAccess.getTodoRule()); } 
	 EOF 
;

// Rule Todo
ruleTodo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTodoAccess().getGroup()); }
(rule__Todo__Group__0)
{ after(grammarAccess.getTodoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContent
entryRuleContent 
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContentAccess().getAlternatives()); }
(rule__Content__Alternatives)
{ after(grammarAccess.getContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTask
entryRuleTask 
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTaskAccess().getGroup()); }
(rule__Task__Group__0)
{ after(grammarAccess.getTaskAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNote
entryRuleNote 
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoteAccess().getGroup()); }
(rule__Note__Group__0)
{ after(grammarAccess.getNoteAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProject
entryRuleProject 
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProjectAccess().getGroup()); }
(rule__Project__Group__0)
{ after(grammarAccess.getProjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpaces
entryRuleSpaces 
:
{ before(grammarAccess.getSpacesRule()); }
	 ruleSpaces
{ after(grammarAccess.getSpacesRule()); } 
	 EOF 
;

// Rule Spaces
ruleSpaces
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpacesAccess().getGroup()); }
(rule__Spaces__Group__0)
{ after(grammarAccess.getSpacesAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Todo__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getContentsAssignment_1_0()); }
(rule__Todo__ContentsAssignment_1_0)
{ after(grammarAccess.getTodoAccess().getContentsAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getTodoAccess().getSpacesParserRuleCall_1_1()); }
	ruleSpaces
{ after(grammarAccess.getTodoAccess().getSpacesParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Content__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
	ruleProject
{ after(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
	ruleTask
{ after(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
	ruleNote
{ after(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Todo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__0__Impl
	rule__Todo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getTodoAction_0()); }
(

)
{ after(grammarAccess.getTodoAccess().getTodoAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Todo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__1__Impl
	rule__Todo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getAlternatives_1()); }
(rule__Todo__Alternatives_1)*
{ after(grammarAccess.getTodoAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Todo__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getTodoAccess().getWSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Task__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Task__Group__0__Impl
	rule__Task__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getIntendAssignment_0()); }
(rule__Task__IntendAssignment_0)*
{ after(grammarAccess.getTaskAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Task__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Task__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getTextAssignment_1()); }
(rule__Task__TextAssignment_1)
{ after(grammarAccess.getTaskAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Note__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__0__Impl
	rule__Note__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getIntendAssignment_0()); }
(rule__Note__IntendAssignment_0)*
{ after(grammarAccess.getNoteAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Note__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getTextAssignment_1()); }
(rule__Note__TextAssignment_1)
{ after(grammarAccess.getNoteAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Project__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendAssignment_0()); }
(rule__Project__IntendAssignment_0)*
{ after(grammarAccess.getProjectAccess().getIntendAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextAssignment_1()); }
(rule__Project__TextAssignment_1)
{ after(grammarAccess.getProjectAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Spaces__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spaces__Group__0__Impl
	rule__Spaces__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Spaces__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpacesAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)*
{ after(grammarAccess.getSpacesAccess().getWSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Spaces__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Spaces__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Spaces__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpacesAccess().getNLTerminalRuleCall_1()); }
	RULE_NL
{ after(grammarAccess.getSpacesAccess().getNLTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Todo__ContentsAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0_0()); }
	ruleContent{ after(grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Task__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getIntendWSTerminalRuleCall_0_0()); }
	RULE_WS{ after(grammarAccess.getTaskAccess().getIntendWSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Task__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getTextTASK_TEXTTerminalRuleCall_1_0()); }
	RULE_TASK_TEXT{ after(grammarAccess.getTaskAccess().getTextTASK_TEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getIntendWSTerminalRuleCall_0_0()); }
	RULE_WS{ after(grammarAccess.getNoteAccess().getIntendWSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getTextTEXTTerminalRuleCall_1_0()); }
	RULE_TEXT{ after(grammarAccess.getNoteAccess().getTextTEXTTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__IntendAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_0_0()); }
	RULE_WS{ after(grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextPROJECT_TerminalRuleCall_1_0()); }
	RULE_PROJECT_{ after(grammarAccess.getProjectAccess().getTextPROJECT_TerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : (' '|'\t');

RULE_NL : '\r'? '\n';

RULE_TASK_TEXT : RULE_HYPHEN ~(('\n'|'\r'))* RULE_NL;

RULE_TEXT : ~((RULE_HYPHEN|'\n'|'\r'|RULE_WS)) ~(('\n'|'\r'))* ~((RULE_COLON|'\n'|'\r')) RULE_NL;

RULE_PROJECT_ : ~(('\n'|'\r'|RULE_HYPHEN|RULE_WS)) ~(('\n'|'\r'))* RULE_COLON RULE_NL;

fragment RULE_COLON : ':';

fragment RULE_HYPHEN : '-';


