/*
* generated by Xtext
*/
grammar InternalTaskPaper;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.sebastianbenz.task.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.sebastianbenz.task.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.sebastianbenz.task.services.TaskPaperGrammarAccess;

}

@parser::members {

 	private TaskPaperGrammarAccess grammarAccess;
 	
    public InternalTaskPaperParser(TokenStream input, TaskPaperGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Todo";	
   	}
   	
   	@Override
   	protected TaskPaperGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTodo
entryRuleTodo returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTodoRule()); }
	 iv_ruleTodo=ruleTodo 
	 { $current=$iv_ruleTodo.current; } 
	 EOF 
;

// Rule Todo
ruleTodo returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTodoAccess().getTodoAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0()); 
	    }
		lv_contents_1_0=ruleContent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTodoRule());
	        }
       		add(
       			$current, 
       			"contents",
        		lv_contents_1_0, 
        		"Content");
	        afterParserOrEnumRuleCall();
	    }

)
)+(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getTodoAccess().getWSTerminalRuleCall_2()); 
    }
)*)
;





// Entry rule entryRuleContent
entryRuleContent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContentRule()); }
	 iv_ruleContent=ruleContent 
	 { $current=$iv_ruleContent.current; } 
	 EOF 
;

// Rule Content
ruleContent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleProject)=>
    { 
        newCompositeNode(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); 
    }
    this_Project_0=ruleProject
    { 
        $current = $this_Project_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |((	ruleTask)=>
    { 
        newCompositeNode(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); 
    }
    this_Task_1=ruleTask
    { 
        $current = $this_Task_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); 
    }
    this_Note_2=ruleNote
    { 
        $current = $this_Note_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getContentAccess().getSpacesParserRuleCall_3()); 
    }
    this_Spaces_3=ruleSpaces
    { 
        $current = $this_Spaces_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTask
entryRuleTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTaskRule()); }
	 iv_ruleTask=ruleTask 
	 { $current=$iv_ruleTask.current; } 
	 EOF 
;

// Rule Task
ruleTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleClosedTask)=>
    { 
        newCompositeNode(grammarAccess.getTaskAccess().getClosedTaskParserRuleCall_0()); 
    }
    this_ClosedTask_0=ruleClosedTask
    { 
        $current = $this_ClosedTask_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTaskAccess().getOpenTaskParserRuleCall_1()); 
    }
    this_OpenTask_1=ruleOpenTask
    { 
        $current = $this_OpenTask_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpenTask
entryRuleOpenTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpenTaskRule()); }
	 iv_ruleOpenTask=ruleOpenTask 
	 { $current=$iv_ruleOpenTask.current; } 
	 EOF 
;

// Rule OpenTask
ruleOpenTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOpenTaskAccess().getOpenTaskAction_0(),
            $current);
    }
)(
(
		lv_text_1_0=RULE_TASK_OPEN
		{
			newLeafNode(lv_text_1_0, grammarAccess.getOpenTaskAccess().getTextTASK_OPENTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOpenTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TASK_OPEN");
	    }

)
))
;





// Entry rule entryRuleClosedTask
entryRuleClosedTask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClosedTaskRule()); }
	 iv_ruleClosedTask=ruleClosedTask 
	 { $current=$iv_ruleClosedTask.current; } 
	 EOF 
;

// Rule ClosedTask
ruleClosedTask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getClosedTaskAccess().getClosedTaskAction_0(),
            $current);
    }
)(
(
		lv_text_1_0=RULE_TASK_CLOSED
		{
			newLeafNode(lv_text_1_0, grammarAccess.getClosedTaskAccess().getTextTASK_CLOSEDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getClosedTaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_1_0, 
        		"TASK_CLOSED");
	    }

)
))
;





// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	 iv_ruleNote=ruleNote 
	 { $current=$iv_ruleNote.current; } 
	 EOF 
;

// Rule Note
ruleNote returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_NOTE_CONTENT
		{
			newLeafNode(lv_text_0_0, grammarAccess.getNoteAccess().getTextNOTE_CONTENTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNoteRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"NOTE_CONTENT");
	    }

)
)
;





// Entry rule entryRuleProject
entryRuleProject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProjectRule()); }
	 iv_ruleProject=ruleProject 
	 { $current=$iv_ruleProject.current; } 
	 EOF 
;

// Rule Project
ruleProject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getProjectAccess().getProjectAction_0(),
            $current);
    }
)(((
(
RULE_WS

)
))=>(
(
		lv_intend_1_0=RULE_WS
		{
			newLeafNode(lv_intend_1_0, grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectRule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"intend",
        		lv_intend_1_0, 
        		"WS");
	    }

)
))*(
(
(
		lv_text_2_1=RULE_PROJECT_1
		{
			newLeafNode(lv_text_2_1, grammarAccess.getProjectAccess().getTextPROJECT_1TerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_1, 
        		"PROJECT_1");
	    }

    |		lv_text_2_2=RULE_PROJECT_2
		{
			newLeafNode(lv_text_2_2, grammarAccess.getProjectAccess().getTextPROJECT_2TerminalRuleCall_2_0_1()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_2, 
        		"PROJECT_2");
	    }

    |		lv_text_2_3=RULE_PROJECT_3
		{
			newLeafNode(lv_text_2_3, grammarAccess.getProjectAccess().getTextPROJECT_3TerminalRuleCall_2_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProjectRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_2_3, 
        		"PROJECT_3");
	    }

)

)
))
;





// Entry rule entryRuleSpaces
entryRuleSpaces returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpacesRule()); }
	 iv_ruleSpaces=ruleSpaces 
	 { $current=$iv_ruleSpaces.current; } 
	 EOF 
;

// Rule Spaces
ruleSpaces returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_text_0_0=RULE_SPACE
		{
			newLeafNode(lv_text_0_0, grammarAccess.getSpacesAccess().getTextSPACETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSpacesRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"text",
        		lv_text_0_0, 
        		"SPACE");
	    }

)
)
;





RULE_WS : (' '|'\t');

RULE_SPACE : RULE_WS* RULE_NL;

RULE_NOTE_CONTENT : RULE_WS* ~((RULE_TASK_START|'\n'|'\r'|RULE_WS)) ~(('\n'|'\r'))* ~((RULE_PROJECT_DELIMITER|'\n'|'\r')) RULE_NL;

RULE_TASK_OPEN : RULE_WS* RULE_TASK_START ~(('@'|'\n'|'\r'))* RULE_NL;

RULE_TASK_CLOSED : (RULE_WS* RULE_TASK_START ~(('\n'|'\r'|'@'))+ '@done' ~(('\n'|'\r'|'@'))+ RULE_NL|RULE_WS* RULE_TASK_START ~(('\n'|'\r'|'@'))+ '@done' RULE_NL|RULE_WS* RULE_TASK_START '@done' ~(('\n'|'\r'|'@'))+ RULE_NL);

RULE_PROJECT_1 : ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

RULE_PROJECT_2 : RULE_WS ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

RULE_PROJECT_3 : RULE_WS RULE_WS+ ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

fragment RULE_PROJECT_DELIMITER : ':';

fragment RULE_NL : '\r'? '\n';

fragment RULE_TASK_START : '-';


