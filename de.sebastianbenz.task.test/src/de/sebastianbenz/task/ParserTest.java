/*
* generated by Xtext
*/
package de.sebastianbenz.task;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

import java.io.IOException;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.Resource.Diagnostic;
import org.eclipse.xtext.Constants;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.junit4.XtextRunner;
import org.eclipse.xtext.resource.XtextResourceSet;
import org.eclipse.xtext.util.StringInputStream;
import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.junit.Test;
import org.junit.internal.matchers.TypeSafeMatcher;
import org.junit.runner.RunWith;

import com.google.common.base.Joiner;
import com.google.inject.Inject;
import com.google.inject.name.Named;

import de.sebastianbenz.task.taskPaper.ClosedTask;
import de.sebastianbenz.task.taskPaper.Content;
import de.sebastianbenz.task.taskPaper.OpenTask;
import de.sebastianbenz.task.taskPaper.Project;
import de.sebastianbenz.task.taskPaper.Spaces;
import de.sebastianbenz.task.taskPaper.Todo;

@RunWith(XtextRunner.class)
@InjectWith(TaskPaperInjectorProvider.class)
public class ParserTest {
	
	@Inject
	private XtextResourceSet resourceSet;
	
	private String fileExtension;
	
	@Inject
	protected void setExtensions(@Named(Constants.FILE_EXTENSIONS) String extensions) {
		this.fileExtension = extensions.split(",")[0];
	}

	@Test
	public void parseRootProject() throws Exception {
		assertThat(parse("Project1:\n"), are(Project.class));
		assertThat(parse(" Project1:\n"), are(Project.class));
		assertThat(parse("	Project1:\n"), are(Project.class));
		assertThat(parse("  Project1:\n"), are(Project.class));
		assertThat(parse("		Project1:\n"), are(Project.class));
		assertThat(parse("	 Project1:\n"), are(Project.class));
	}
	
	@Test
	public void parseRootProjectWithLineBreak() throws Exception {
		assertThat( parse("Project1:\n"), are(Project.class));
		assertThat( parse("Project1-:\n"), are(Project.class));
		assertThat( parse("Project1:\n "), are(Project.class));
		assertThat( parse("Project1:\n	"), are(Project.class));
	}
	
	@Test
	public void parseOpenTask() throws Exception {
		assertThat( parse("- a task\n"), are(OpenTask.class));
		assertThat( parse(" - a task\n"), are(OpenTask.class));
		assertThat( parse("		- a task\n"), are(OpenTask.class));
		assertThat( parse("- a task :\n"), are(OpenTask.class));
		assertThat( parse("- a task\n"), are(OpenTask.class));
		assertThat( parse("- a task\n "), are(OpenTask.class));
		assertThat( parse("- a task\n	"), are(OpenTask.class));
	}
	
	@Test
	public void parseClosedTask() throws Exception {
		assertThat( parse("- a task@done\n"), are(ClosedTask.class));
		assertThat( parse(" - a task @done\n"), are(ClosedTask.class));
		assertThat( parse("		- a task@done\n"), are(ClosedTask.class));
		assertThat( parse("- a task :@done\n"), are(ClosedTask.class));
		assertThat( parse("- a task @done\n"), are(ClosedTask.class));
		assertThat( parse("- a task@done\n "), are(ClosedTask.class));
		assertThat( parse("- a task @done\n	"), are(ClosedTask.class));
	}
	
	@Test
	public void parseEmptyLines() throws Exception {
		assertThat( parse("\nProject1:\n"), are(Spaces.class, Project.class));
		assertThat( parse("Project1:\n\n\nProject1:\n"), are(Project.class, Spaces.class, Spaces.class,Project.class));
		
	}

	@SuppressWarnings("restriction")
	private Matcher<EList<Content>> are(final Class<?>... types) {
		return new TypeSafeMatcher<EList<Content>>() {

			@Override
			public void describeTo(Description description) {
				description.appendValueList("", ", ", "", types);
			}

			@Override
			public boolean matchesSafely(EList<Content> item) {
				int i = 0;
				for (Class<?> expectedType : types) {
					if(!expectedType.isInstance(item.get(i))){
						return false;
					}
					i++;
				}
				assertEquals(types.length, item.size());
				return true;
			}
		};
	}

	protected EList<Content> parse(String input) throws IOException {
		Resource resource = resourceSet.createResource(URI.createURI(String.format("TaskPaperTest.%s",fileExtension)));
		resource.load(new StringInputStream(input), null);
		assertNoErrors(resource);
		Todo todo = (Todo)resource.getContents().get(0);
		return todo.getContents();
	}

	protected void assertNoErrors(Resource resource) {
		EList<Diagnostic> errors = resource.getErrors();
		assertTrue(Joiner.on("\n ").join(errors), errors.isEmpty());
	}
}
