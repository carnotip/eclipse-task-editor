grammar de.sebastianbenz.task.Task with org.eclipse.xtext.common.Terminals

import "platform:/resource/de.sebastianbenz.task/model/Task.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate taskPaper "http://www.sebastianbenz.de/task/query/2011/"

Query:
	{Query} (expression=OrExpr)?
;

Expression:
	OrExpr | AndExpr | CompEqExpr | CompExpr | UnaryExpr | Atom
;

OrExpr :
	AndExpr ({OrExpr.left=current} 'or' right=AndExpr)*;

AndExpr :
	CompEqExpr ({AndExpr.left=current} 'and' right=CompEqExpr)*;
 
CompEqExpr :
	CompExpr ({CompEqExpr.left=current} operator=CompEqOperator right=CompExpr)*;
 
CompExpr :
	UnaryExpr ({CompExpr.left=current} operator=CompOperator right=UnaryExpr)*;

UnaryExpr :
	Atom | ({UnaryExpr} 'not' expr=UnaryExpr);

Atom :
	NumberAtom
	| ProjectReference
	| StringReference
	| TagReference
	| ParenExpr 
	| Phrase;

ParenExpr :
	'(' {ParenExpr} expr=OrExpr ')';
 
NumberAtom :
	value = INT;
	
ProjectReference :
	'project' ':' project=QueryString
;

Phrase :
	value=QueryString	
;

QueryString returns ecore::EString: 
		(ID|'*')* | STRING 
;

StringReference  :
	search=QueryString	
;

TagReference:
	'@' tagName=[Tag]	
;

enum CompEqOperator:
	EQUAL = '=' | NOT_EQUAL = '!=';

enum CompOperator:
	LESS_EQUAL = '<=' | LESS = '<' | GREATER_EQUAL = '>=' |  GREATER = '>';
	