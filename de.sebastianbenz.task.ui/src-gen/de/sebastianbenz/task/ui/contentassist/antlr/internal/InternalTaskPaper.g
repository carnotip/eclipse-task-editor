/*
* generated by Xtext
*/
grammar InternalTaskPaper;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.sebastianbenz.task.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.sebastianbenz.task.services.TaskPaperGrammarAccess;

}

@parser::members {
 
 	private TaskPaperGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(TaskPaperGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTodo
entryRuleTodo 
:
{ before(grammarAccess.getTodoRule()); }
	 ruleTodo
{ after(grammarAccess.getTodoRule()); } 
	 EOF 
;

// Rule Todo
ruleTodo
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTodoAccess().getGroup()); }
(rule__Todo__Group__0)
{ after(grammarAccess.getTodoAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContent
entryRuleContent 
:
{ before(grammarAccess.getContentRule()); }
	 ruleContent
{ after(grammarAccess.getContentRule()); } 
	 EOF 
;

// Rule Content
ruleContent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContentAccess().getAlternatives()); }
(rule__Content__Alternatives)
{ after(grammarAccess.getContentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTask
entryRuleTask 
:
{ before(grammarAccess.getTaskRule()); }
	 ruleTask
{ after(grammarAccess.getTaskRule()); } 
	 EOF 
;

// Rule Task
ruleTask
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTaskAccess().getAlternatives()); }
(rule__Task__Alternatives)
{ after(grammarAccess.getTaskAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOpenTask
entryRuleOpenTask 
:
{ before(grammarAccess.getOpenTaskRule()); }
	 ruleOpenTask
{ after(grammarAccess.getOpenTaskRule()); } 
	 EOF 
;

// Rule OpenTask
ruleOpenTask
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOpenTaskAccess().getGroup()); }
(rule__OpenTask__Group__0)
{ after(grammarAccess.getOpenTaskAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClosedTask
entryRuleClosedTask 
:
{ before(grammarAccess.getClosedTaskRule()); }
	 ruleClosedTask
{ after(grammarAccess.getClosedTaskRule()); } 
	 EOF 
;

// Rule ClosedTask
ruleClosedTask
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClosedTaskAccess().getGroup()); }
(rule__ClosedTask__Group__0)
{ after(grammarAccess.getClosedTaskAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNote
entryRuleNote 
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoteAccess().getTextAssignment()); }
(rule__Note__TextAssignment)
{ after(grammarAccess.getNoteAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProject
entryRuleProject 
:
{ before(grammarAccess.getProjectRule()); }
	 ruleProject
{ after(grammarAccess.getProjectRule()); } 
	 EOF 
;

// Rule Project
ruleProject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProjectAccess().getGroup()); }
(rule__Project__Group__0)
{ after(grammarAccess.getProjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSpaces
entryRuleSpaces 
:
{ before(grammarAccess.getSpacesRule()); }
	 ruleSpaces
{ after(grammarAccess.getSpacesRule()); } 
	 EOF 
;

// Rule Spaces
ruleSpaces
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSpacesAccess().getTextAssignment()); }
(rule__Spaces__TextAssignment)
{ after(grammarAccess.getSpacesAccess().getTextAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Content__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
(	ruleProject)
{ after(grammarAccess.getContentAccess().getProjectParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
(	ruleTask)
{ after(grammarAccess.getContentAccess().getTaskParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
	ruleNote
{ after(grammarAccess.getContentAccess().getNoteParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getContentAccess().getSpacesParserRuleCall_3()); }
	ruleSpaces
{ after(grammarAccess.getContentAccess().getSpacesParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Task__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTaskAccess().getClosedTaskParserRuleCall_0()); }
(	ruleClosedTask)
{ after(grammarAccess.getTaskAccess().getClosedTaskParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTaskAccess().getOpenTaskParserRuleCall_1()); }
	ruleOpenTask
{ after(grammarAccess.getTaskAccess().getOpenTaskParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__TextAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextPROJECT_1TerminalRuleCall_2_0_0()); }
	RULE_PROJECT_1
{ after(grammarAccess.getProjectAccess().getTextPROJECT_1TerminalRuleCall_2_0_0()); }
)

    |(
{ before(grammarAccess.getProjectAccess().getTextPROJECT_2TerminalRuleCall_2_0_1()); }
	RULE_PROJECT_2
{ after(grammarAccess.getProjectAccess().getTextPROJECT_2TerminalRuleCall_2_0_1()); }
)

    |(
{ before(grammarAccess.getProjectAccess().getTextPROJECT_3TerminalRuleCall_2_0_2()); }
	RULE_PROJECT_3
{ after(grammarAccess.getProjectAccess().getTextPROJECT_3TerminalRuleCall_2_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Todo__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__0__Impl
	rule__Todo__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getTodoAction_0()); }
(

)
{ after(grammarAccess.getTodoAccess().getTodoAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Todo__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__1__Impl
	rule__Todo__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTodoAccess().getContentsAssignment_1()); }
(rule__Todo__ContentsAssignment_1)
{ after(grammarAccess.getTodoAccess().getContentsAssignment_1()); }
)
(
{ before(grammarAccess.getTodoAccess().getContentsAssignment_1()); }
(rule__Todo__ContentsAssignment_1)*
{ after(grammarAccess.getTodoAccess().getContentsAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Todo__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Todo__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Todo__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getTodoAccess().getWSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OpenTask__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpenTask__Group__0__Impl
	rule__OpenTask__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTask__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTaskAccess().getOpenTaskAction_0()); }
(

)
{ after(grammarAccess.getOpenTaskAccess().getOpenTaskAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OpenTask__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OpenTask__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTask__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTaskAccess().getTextAssignment_1()); }
(rule__OpenTask__TextAssignment_1)
{ after(grammarAccess.getOpenTaskAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClosedTask__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosedTask__Group__0__Impl
	rule__ClosedTask__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosedTask__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosedTaskAccess().getClosedTaskAction_0()); }
(

)
{ after(grammarAccess.getClosedTaskAccess().getClosedTaskAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClosedTask__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClosedTask__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClosedTask__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosedTaskAccess().getTextAssignment_1()); }
(rule__ClosedTask__TextAssignment_1)
{ after(grammarAccess.getClosedTaskAccess().getTextAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Project__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__0__Impl
	rule__Project__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getProjectAction_0()); }
(

)
{ after(grammarAccess.getProjectAccess().getProjectAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__1__Impl
	rule__Project__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getGroup_1()); }
(rule__Project__Group_1__0)*
{ after(grammarAccess.getProjectAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Project__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextAssignment_2()); }
(rule__Project__TextAssignment_2)
{ after(grammarAccess.getProjectAccess().getTextAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Project__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Project__Group_1__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Project__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendAssignment_1_0()); }
(rule__Project__IntendAssignment_1_0)
{ after(grammarAccess.getProjectAccess().getIntendAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Todo__ContentsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0()); }
	ruleContent{ after(grammarAccess.getTodoAccess().getContentsContentParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OpenTask__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOpenTaskAccess().getTextTASK_OPENTerminalRuleCall_1_0()); }
	RULE_TASK_OPEN{ after(grammarAccess.getOpenTaskAccess().getTextTASK_OPENTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClosedTask__TextAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClosedTaskAccess().getTextTASK_CLOSEDTerminalRuleCall_1_0()); }
	RULE_TASK_CLOSED{ after(grammarAccess.getClosedTaskAccess().getTextTASK_CLOSEDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Note__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoteAccess().getTextNOTE_CONTENTTerminalRuleCall_0()); }
	RULE_NOTE_CONTENT{ after(grammarAccess.getNoteAccess().getTextNOTE_CONTENTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__IntendAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_1_0_0()); }
	RULE_WS{ after(grammarAccess.getProjectAccess().getIntendWSTerminalRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Project__TextAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProjectAccess().getTextAlternatives_2_0()); }
(rule__Project__TextAlternatives_2_0)
{ after(grammarAccess.getProjectAccess().getTextAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Spaces__TextAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSpacesAccess().getTextSPACETerminalRuleCall_0()); }
	RULE_SPACE{ after(grammarAccess.getSpacesAccess().getTextSPACETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_WS : (' '|'\t');

RULE_SPACE : RULE_WS* RULE_NL;

RULE_NOTE_CONTENT : RULE_WS* ~((RULE_TASK_START|'\n'|'\r'|RULE_WS)) ~(('\n'|'\r'))* ~((RULE_PROJECT_DELIMITER|'\n'|'\r')) RULE_NL;

RULE_TASK_OPEN : RULE_WS* RULE_TASK_START ~(('@'|'\n'|'\r'))* RULE_NL;

RULE_TASK_CLOSED : (RULE_WS* RULE_TASK_START ~(('\n'|'\r'|'@'))+ '@done' ~(('\n'|'\r'|'@'))+ RULE_NL|RULE_WS* RULE_TASK_START ~(('\n'|'\r'|'@'))+ '@done' RULE_NL|RULE_WS* RULE_TASK_START '@done' ~(('\n'|'\r'|'@'))+ RULE_NL);

RULE_PROJECT_1 : ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

RULE_PROJECT_2 : RULE_WS ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

RULE_PROJECT_3 : RULE_WS RULE_WS+ ~(('\n'|'\r'|RULE_TASK_START|RULE_WS)) ~(('\n'|'\r'))* RULE_PROJECT_DELIMITER RULE_NL;

fragment RULE_PROJECT_DELIMITER : ':';

fragment RULE_NL : '\r'? '\n';

fragment RULE_TASK_START : '-';


